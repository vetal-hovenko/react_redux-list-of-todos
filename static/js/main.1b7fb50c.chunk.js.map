{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","actions","todo","type","payload","currentTodoReducer","state","action","status","query","defaultParams","ALL","filterReducer","params","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","title","completed","id","dispatch","className","onClick","currentTodoActions","TodoList","filterByStatus","filterByQuery","filteredTodos","React","useMemo","statusMatches","queryMatches","toLowerCase","replace","includes","length","map","TodoFilter","searchQuery","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","authorOfTodo","setAuthorOfTodo","useEffect","userId","userFromAPI","href","email","name","App","isLoading","setIsLoading","todosFromAPI","todoListActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b7fb50c.chunk.js","sourcesContent":["export enum TodoStatus {\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n  ALL = 'all',\n}\n\ninterface SetStatusFilter {\n  type: 'filter/STATUS',\n  payload: TodoStatus,\n}\n\ninterface SetSearchQueryFilter {\n  type: 'filter/SEARCH_QUERY',\n  payload: string,\n}\n\ninterface Filter {\n  query: string,\n  status: TodoStatus,\n}\n\ntype Action = SetStatusFilter | SetSearchQueryFilter;\n\nconst filterByStatus = (status: TodoStatus): SetStatusFilter => (\n  { type: 'filter/STATUS', payload: status }\n);\n\nconst filterBySearchQuery = (query: string): SetSearchQueryFilter => (\n  { type: 'filter/SEARCH_QUERY', payload: query }\n);\n\nexport const actions = { filterByStatus, filterBySearchQuery };\n\nconst defaultParams: Filter = {\n  query: '',\n  status: TodoStatus.ALL,\n};\n\nconst filterReducer = (\n  params = defaultParams,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/STATUS': {\n      return {\n        ...params,\n        status: action.payload,\n      };\n    }\n\n    case 'filter/SEARCH_QUERY': {\n      return {\n        ...params,\n        query: action.payload,\n      };\n    }\n\n    default:\n      return params;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET': {\n      return action.payload;\n    }\n\n    case 'currentTodo/REMOVE': {\n      return null;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Todo } from '../types/Todo';\n\ninterface LoadTodos {\n  type: 'todos/LOAD',\n  payload: Todo[]\n}\n\nconst loadTodos = (todos: Todo[]): LoadTodos => (\n  { type: 'todos/LOAD', payload: todos }\n);\n\nexport const actions = { loadTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [], action: LoadTodos,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD': {\n      return action.payload;\n    }\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const {\n    title, completed, id,\n  } = todo;\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed\n        && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={\n            completed\n              ? 'has-text-success'\n              : 'has-text-danger'\n          }\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            {currentTodo\n              ? <i className=\"far fa-eye-slash\" />\n              : <i className=\"far fa-eye\" />}\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const { todos, filterByStatus, filterByQuery } = useAppSelector((state) => ({\n    todos: state.todos,\n    filterByStatus: state.filter.status,\n    filterByQuery: state.filter.query,\n  }));\n\n  const filteredTodos = React.useMemo(() => {\n    return todos.filter((todo) => {\n      const statusMatches\n        = filterByStatus === 'all'\n        || (filterByStatus === 'completed' ? todo.completed : !todo.completed);\n\n      const queryMatches = todo.title\n        .toLowerCase()\n        .replace(/\\s+/, '')\n        .includes(\n          filterByQuery\n            .toLowerCase()\n            .replace(/\\s+/, ''),\n        );\n\n      return statusMatches && queryMatches;\n    });\n  }, [todos, filterByStatus, filterByQuery]);\n\n  return (\n    <>\n      {filteredTodos.length < 1 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map((todo) => {\n              return <TodoItem key={todo.id} todo={todo} />;\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { TodoStatus, actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const searchQuery = useAppSelector(state => state.filter.query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => dispatch(\n              filterActions.filterByStatus(event.target.value as TodoStatus),\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => dispatch(\n            filterActions.filterBySearchQuery(event.target.value),\n          )}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchQuery.length > 0\n            && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => dispatch(filterActions.filterBySearchQuery(''))}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  const [authorOfTodo, setAuthorOfTodo] = React.useState<User | null>(null);\n\n  React.useEffect(() => {\n    getUser(currentTodo?.userId || 0)\n      .then((userFromAPI) => setAuthorOfTodo(userFromAPI));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!authorOfTodo && <Loader />}\n\n      {authorOfTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${authorOfTodo?.email}`}>{authorOfTodo?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoListActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n\n  React.useEffect(() => {\n    getTodos()\n      .then((todosFromAPI) => dispatch(todoListActions.loadTodos(todosFromAPI)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? <Loader /> : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}